
//optimal
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root)
    {
        List<integer> res =new ArrayList<>();
        if(root==0) return res;
        Stack<TreeNode> stk=new Stack<>();
        stk.push(root);
        while(!stk.empty())
        {
            TreeNode ele=stk.pop();
            res.add(ele.val);
            if(ele->right!=null) return stk.push(ele->right);
            if(ele->left!=null) return stk.push(ele->left);
        }
        return res;
    }
};



//brute


class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root)
    {
         vector <int> ans;
        preorder(root,ans);
        return ans;
    }


    void preorder(TreeNode* root,vector<int>&ans)
    {
        if(root==0) return ;
        ans.push_back(root->val);
         preorder(root->left,ans);
            preorder(root->right,ans);
        
        
    }
};
